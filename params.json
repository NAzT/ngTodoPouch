{"name":"ng-todopouch","tagline":"Yet another Todo Tutorial using AngularJS and PouchDb","body":"# ngToDoPouch \r\n\r\nAn AngularJS Tutorial that will walk you through creating a\r\nToDo Application using a local PouchDb.  This tutorial should\r\nintroduce you to some of the AngularJS concepts like directives and\r\ndata-binding.  It will also show you how to build offline applications\r\nusing PouchDb. \r\n\r\n## Setup\r\n\r\nIN order to get started with building our application we need to get a few things setup, you can use tools like Yeoman to help you in this process, but for this exercise we are going to do it manually to help get a better idea on what is going on under the hood.\r\n\r\n* (Optional) Install brackets editor (http://brackets.io/)\r\n\r\nBrackets is a new editor built on HTML5 technologies by the awesome folks over at adobe.  If you do not have an editor of choice you may want to give brackets a try.\r\n\r\n* Install Nodejs (http://nodejs.org)\r\n\r\nWhile we will not be doing any NodeJS development, NodeJS will play a big part of our build tool system and our test dev server, it also includes a package manager called npm that makes it very easy for use to install dependencies.\r\n\r\n* Open console\r\n\r\n``` sh\r\nmkdir todo-pouch\r\ncd todo-pouch\r\nnpm install bower -g\r\n```\r\n\r\n* What is bower?\r\n\r\nBower is a client-side package management tool, we are going to use this tool\r\nto install jquery, bootstrap.css, angular, and pouchdb.  It works a lot like npm but places all of the packages in the components directory.  If you want to find out more about bower check out [http://bower.io/](http://bower.io/).\r\n\r\n``` sh\r\nbower init\r\nbower install jquery bootstrap.css angular --save\r\nbower install http://download.pouchdb.com/pouchdb-nightly.min.js --save\r\n```\r\n\r\n### index.html\r\n\r\nNext, we are going to create an index.html document, which will be our default\r\nweb document for this application.\r\n\r\n```\r\ntouch index.html\r\n```\r\n\r\n``` html\r\n<!doctype html>\r\n<html ng-app=\"Todo\">\r\n<head>\r\n  <title>TODO POUCH</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap.css/css/bootstrap.css\">\r\n  <link rel=\"stylesheet\" href=\"/css/app.css\"> \r\n</head>\r\n<body>\r\n  <div class=\"container\">\r\n    <ng-view></ng-view>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/pouchdb/index.js\"></script>\r\n  <script src=\"/ng-app.js\"></script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n### setup grunt\r\n\r\nGrunt is a build tool built in javascript, it allows you to create tasks that can be run to perform the `Grunt` work.  We will be installing the following tasks:\r\n\r\n* jshint\r\n* concat\r\n* uglify\r\n* connect\r\n\r\nThese grunt tasks will enable us to run our dev environment using on cmd.\r\n\r\n``` sh\r\nnpm install grunt-cli -g\r\nnpm init\r\ntouch Gruntfile.js\r\nnpm install grunt-contrib-concat grunt-contrib-jshint grunt-contrib-uglify grunt-contrib-connect grunt-contrib-watch --save-dev\r\ntouch Gruntfile.js\r\n```\r\nPaste the following js in Gruntfile.js\r\n\r\n``` js\r\nvar www = __dirname;\r\n\r\nvar appFiles = [\r\nwww + '/app/app.js',\r\nwww + '/app/services/*.js',\r\nwww + '/app/filters/*.js',\r\nwww + '/app/directives/*.js',\r\nwww + '/app/controllers/*.js'\r\n];\r\n\r\nmodule.exports = function(grunt) {\r\n  grunt.initConfig({\r\n    jshint: {\r\n      files: appFiles\r\n    },\r\n    concat: {\r\n      app: {\r\n        src: appFiles,\r\n      dest: www + '/ng-app.js'\r\n      }\r\n    },\r\n    uglify: {\r\n      app: {\r\n        src: [ www + '/ng-app.js'],\r\n        dest: www + '/ng-app.min.js'\r\n      }\r\n    },\r\n    watch: {\r\n      scripts: {\r\n        files: www + '/app/**/*.js',\r\n        tasks: ['jshint','concat'],\r\n        options: {\r\n          interrupt: true\r\n        }\r\n      }\r\n    },\r\n    connect: {\r\n      server: {\r\n        options: {\r\n          port: 3000,\r\n          base: '.'\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.loadNpmTasks('grunt-contrib-concat');\r\n  grunt.loadNpmTasks('grunt-contrib-jshint');\r\n  grunt.loadNpmTasks('grunt-contrib-uglify');\r\n  grunt.loadNpmTasks('grunt-contrib-watch');\r\n  grunt.loadNpmTasks('grunt-contrib-connect');\r\n\r\n  grunt.registerTask('default', ['jshint', 'concat']);\r\n  grunt.registerTask('server', ['default', 'connect', 'watch']);\r\n}\r\n```\r\n\r\n### create angular app directory\r\n\r\n``` sh\r\nmkdir app\r\ntouch app/app.js\r\nmkdir app/controllers\r\ntouch app/controllers/main.js\r\nmkdir app/templates\r\ntouch app/templates/main.html\r\n```\r\n\r\n### open app/app.js and setup the application\r\n\r\n```\r\nangular.module('Todo', [])\r\n  .config(function($routeProvider, $locationProvider) {\r\n    'use strict';\r\n\r\n    $routeProvider\r\n      .when('/', { \r\n        controller: 'MainCtrl', \r\n        templateUrl: '/app/templates/main.html'\r\n      });\r\n    $locationProvider.html5Mode(true);\r\n  });\r\n```\r\n\r\nIn the app.js we are adding a config section, in this section we\r\nare injecting two services.  ($routeProvider, $locationProvider).\r\n\r\n$routeProvider gives the ability to do routing.\r\n\r\n$locationProvider gives us html5 push updates.\r\n\r\nopen app/controllers/main.js\r\n\r\n``` js\r\nangular.module('Todo')\r\n  .controller('MainCtrl', function($scope) {\r\n    \r\n  });\r\n```\r\n\r\nopen app/templates/main.html\r\n\r\n```\r\n<h1>Todo Pouch</h1>\r\n```\r\n\r\nLets confirm we have everything setup correctly.\r\n\r\nIn the console (make sure you are in the project dir)\r\n\r\n``` sh\r\ngrunt server\r\n```\r\nopen browser to http://localhost:3000\r\n\r\nIf you see Todo Pouch in your browser, then we are setup correctly.  If not check the Chrome JavaScript console and see if you can see any errors.  Please submit in issue to this repo.\r\n\r\n## Exercise 1 - Create the declarative template\r\n\r\nWe will step through the declarative template line by line.\r\n\r\n``` html\r\n<span>{{remaining()}} of {{todos.length}} remaining</span>\r\n```\r\n\r\nShow how many todos of total have not been completed.\r\nWe are using the ng-bind directive to call $scope.remaining() function to get the number of todos that have not been marked completed.  Then we use the ng-bind directive to call the $scope.todos.length to get the total count of todo items.\r\n\r\n``` html\r\n[<a ng-href=\"\" ng-click=\"removeDone()\">Remove done</a>]\r\n```\r\n\r\nGive the user the ability to remove all done tasks from the list.  Here we are using an anchor element and a ng-click attribute to map the anchor click event to the $scope.removeDone function.\r\n\r\n``` html\r\n<ul class=\"unstyled\">\r\n  <li ng-repeat=\"todo in todos\">\r\n    <input type=\"checkbox\" ng-model=\"todo.done\" ng-click=\"updateTodo(todo)\">\r\n    <span ng-class=\"{{done: todo.done\">{{todo.text}}</span>\r\n  </li>\r\n</ul>\r\n```\r\n\r\nCreate an unordered list of todo tasks, for each line item \r\nwe want to provide a checkbox with an attribute `ng-model` assigned \r\nto ``$scope.todo.done`` and map the input `ng-click` attribute to ``$scope.updateTodo(todo)`.\r\n\r\nNext we want to use the ng-class directive to add the `done` class to the span element if `todo.done === true`.  And use the ng-bind directive to show the todo task.\r\n\r\n\r\n``` html\r\n<form ng-submit=\"addTodo()\">\r\n  <input type=\"text\" ng-model=\"todoText\"  size=\"30\"\r\n         placeholder=\"add new todo here\">\r\n  <input class=\"btn btn-primary\" type=\"submit\" value=\"add\">\r\n</form>\r\n```\r\n\r\nFinally, we want to add a form with a directive `ng-submit`, which is assigned to `$scope.addTodo()`.  In the form, we are assigning the input element `ng-model` to $scope.todoText.\r\n\r\nOpen the browser and you should now see the total text and input form.\r\n\r\n## Exercise 2 - Controller\r\n\r\nLets wire the view to the controller and models.\r\n\r\nopen main.js and add the following:\r\n\r\n``` js\r\n$scope.todos = [];\r\n```\r\n\r\ninitialize the $scope.todos array.\r\n\r\n```js\r\n$scope.addTodo = function() {\r\n  var newTodo = {\r\n    _id: Math.uuid(),\r\n    text: $scope.todoText,\r\n    done: false\r\n  };\r\n  $scope.todos.push(newTodo);\r\n  $scope.todoText = '';\r\n};\r\n```\r\n\r\nAdd todo function\r\n\r\n## Exercise 3\r\n\r\n``` js\r\n$scope.removeDone = function() {\r\n  // backup array\r\n  var oldTodos = $scope.todos;\r\n  // reset to an empty array\r\n  $scope.todos = [];\r\n  // loop through the old values\r\n  angular.forEach(oldTodos, function(todo) {\r\n    // if todo is marked as done, or checked.\r\n    if (!todo.done) {\r\n      // add todo to the array\r\n      $scope.todos.push(todo);\r\n    }\r\n    else {\r\n      // remove todo from array\r\n      $scope.removeTodo(todo);\r\n    }\r\n  });\r\n};\r\n```\r\nRemove all items that are marked as done.\r\n\r\n\r\n## Exercise 4 \r\n\r\n```\r\n$scope.remaining = function() {\r\n  var count = 0;\r\n  angular.forEach($scope.todos, function(todo) {\r\n      count += todo.done ? 0 : 1;\r\n  });\r\n  return count;\r\n};\r\n```\r\n\r\nadd the remaining function to the controller.  Now we should \r\nsee 0 of 0 remaining.\r\n\r\n## Exercise 5 - PouchDb\r\n\r\n- Create Pouch Service\r\n\r\n``` sh\r\nmkdir app/services\r\ntouch app/services/pouch.js\r\n```\r\n\r\npouch.js\r\n\r\n``` js\r\nangular.module('Todo')\r\n  .value('$pouch', Pouch('idb://todos'));\r\n```\r\n\r\n- Include in the controller\r\n\r\nmain.js\r\n\r\nreplace \r\n\r\n``` js\r\n.controller('MainCtrl', function($scope) {\r\n```\r\n\r\nwith\r\n\r\n``` js\r\n.controller('MainCtrl', function($scope, $pouch) {\r\n```\r\n\r\n## Exercise 6 - Persist Todo List\r\n\r\n* On Add Todo save to pouch\r\n\r\n``` js\r\n$scope.addTodo = function() {\r\n  var newTodo = {\r\n    _id: Math.uuid(),\r\n    text: $scope.todoText,\r\n    done: false\r\n  };\r\n  $scope.todos.push(newTodo);\r\n  $scope.todoText = '';\r\n  $pouch.post(newTodo, function(err, res) {\r\n    if (err) { console.log(err); }\r\n    newTodo._id = res.id;\r\n    newTodo._rev = res.rev;\r\n  });\r\n};\r\n```\r\n\r\n## Exercise 7 - Load Todo List\r\n\r\n``` js\r\n$pouch.allDocs({include_docs: true}, function(err, response) {\r\n  $scope.$apply(function() {\r\n    response.rows.forEach(function(row) {\r\n      $scope.todos.push(row.doc);\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n## Exercise 8 - Remove done tasks from list\r\n\r\n``` js\r\n$scope.removeTodo = function(todo) {\r\n  $pouch.remove(todo);\r\n};\r\n\r\n```\r\n\r\n## Exercise 9 - Update Todo List status\r\n\r\n``` js\r\n$scope.updateTodo = function(todo) {\r\n  $pouch.put(todo);\r\n};\r\n```\r\n\r\n## Finished\r\n\r\nPlease provide feedback for improvement or if you enjoyed the exercise send me a tweet @twilson63\r\n\r\n## License\r\n\r\nMIT\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}