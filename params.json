{"name":"ng-todopouch","tagline":"Yet another Todo Tutorial using AngularJS and PouchDb","body":"# ngToDoPouch\r\n\r\nAn AngularJS Tutorial that will walk you through creating a\r\nToDo Application using a local PouchDb. \r\n\r\n## Setup\r\n\r\n* Install brackets (http://brackets.io/)\r\n* Install Emmet Extension (https://github.com/emmetio/emmet/downloads)\r\n* Install Nodejs (http://nodejs.org)\r\n* Open console\r\n\r\n``` sh\r\nmkdir todo-pouch\r\ncd todo-pouch\r\nnpm install bower -g\r\nbower init\r\nbower install jquery bootstrap.css angular --save\r\nower install http://download.pouchdb.com/pouchdb-nightly.min.js --save\r\ntouch index.html\r\n```\r\n\r\nindex.html - emmet version\r\n\r\n``` html\r\nhtml[ng-app=\"Todo\"]>head>title{TODO POUCH}+link[href=\"/components/bootstrap/css/bootstrap.css\"]^body>.container>h1{TODO POUCH}+ng-view^script[src=\"/components/jquery/jquery.js\"]+script[src=\"/components/angular/angular.js\"]+script[src=\"/components/pouchdb-nightly.min/index.js\"]+script[src=\"/app/ng-app.js\"]\r\n```\r\n\r\nindex.html\r\n\r\n``` html\r\n<!doctype html>\r\n<html ng-app=\"Todo\">\r\n<head>\r\n  <title>TODO POUCH</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap/css/bootstrap.css\">\r\n</head>\r\n<body>\r\n  <div class=\"container\">\r\n    <h1>TODO POUCH</h1>\r\n    <ng-view></ng-view>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/pouchdb-nightly.min/index.js\"></script>\r\n</body>\r\n</html>\r\n```\r\nsetup grunt\r\n\r\n``` sh\r\nnpm install grunt-cli -g\r\nnpm init\r\ntouch Gruntfile.js\r\nnpm install grunt-contrib-concat grunt-contrib-jshint grunt-contrib-uglify grunt-contrib-watch --save-dev\r\n```\r\nPaste the following js in Gruntfile.js\r\n\r\n``` js\r\nvar www = __dirname;\r\n\r\nvar appFiles = [\r\nwww + '/app/app.js',\r\nwww + '/app/services/*.js',\r\nwww + '/app/filters/*.js',\r\nwww + '/app/directives/*.js',\r\nwww + '/app/controllers/*.js'\r\n];\r\n\r\nmodule.exports = function(grunt) {\r\n  grunt.initConfig({\r\n    jshint: {\r\n      files: appFiles\r\n    },\r\n    concat: {\r\n      app: {\r\n        src: appFiles,\r\n      dest: www + '/ng-app.js'\r\n      }\r\n    },\r\n    uglify: {\r\n      grxnet: {\r\n        src: [ www + '/ng-app.js'],\r\n        dest: www + '/ng-app.min.js'\r\n      }\r\n    },\r\n    watch: {\r\n      scripts: {\r\n        files: www + '/app/**/*.js',\r\n        tasks: ['jshint','concat'],\r\n        options: {\r\n          interrupt: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.loadNpmTasks('grunt-contrib-concat');\r\n  grunt.loadNpmTasks('grunt-contrib-jshint');\r\n  grunt.loadNpmTasks('grunt-contrib-uglify');\r\n  grunt.loadNpmTasks('grunt-contrib-watch');\r\n\r\n  grunt.registerTask('default', 'jshint concat uglify');\r\n\r\n}\r\n\r\n```\r\n\r\nInstall web server\r\n\r\n``` sh\r\nnpm install w3 -g\r\n```\r\n\r\ncreate app directory\r\n\r\n``` sh\r\nmkdir app\r\ntouch app/app.js\r\nmkdir app/controllers\r\ntouch app/controllers/main.js\r\nmkdir app/templates\r\ntouch app/templates/main.html\r\n```\r\n\r\nopen app/app.js and setup the application\r\n\r\n```\r\nangular.module('Todo', [])\r\n  .config(function($routeProvider, $locationProvider) {\r\n    'use strict';\r\n\r\n    $routeProvider\r\n      .when('/', { \r\n        controller: 'MainCtrl', \r\n        templateUrl: '/app/templates/main.html'\r\n      });\r\n    $locationProvider.html5Mode(true);\r\n  });\r\n```\r\n\r\nIn the app.js we are adding a config section, in this section we\r\nare injected two services.  ($routeProvider, $locationProvider).\r\n\r\n$routeProvider gives the ability to do routing.\r\n\r\n$locationProvider gives us html5 push updates.\r\n\r\nopen app/controllers/main.js\r\n\r\n``` js\r\nangular.module('Todo')\r\n  .controller('MainCtrl', function($scope) {\r\n    \r\n  });\r\n```\r\n\r\nopen app/templates/main.html\r\n\r\n```\r\n<h1>Todo Pouch</h1>\r\n```\r\n\r\nLets confirm we have everything setup correctly.\r\n\r\nOpen two console windows\r\n\r\nconsole 1 - make sure you are in the project dir\r\n\r\n``` sh\r\ngrunt concat\r\ngrunt watch\r\n```\r\n\r\nconsole 2 - make sure your in the project dir\r\n\r\n``` sh\r\nw3\r\n```\r\n\r\nopen browser to http://localhost:3000\r\n\r\nIf you see Todo Pouch in your browser, then we are setup correctly.\r\n\r\n# Exercise 1 - Create the declarative templatek\r\n\r\nWe will step through the declarative template line by line.\r\n\r\n``` html\r\n<span>{{remaining()}} of {{todos.length}} remaining</span>\r\n```\r\n\r\nShow how many todos of total have not been completed.\r\nWe are using the ng-bind directive to call $scope.remaining() function to get the number of todos that have not been marked completed.  Then we use the ng-bind directive to call the $scope.todos.length to get the total count of todo items.\r\n\r\n``` html\r\n[<a ng-href=\"\" ng-click=\"removeDone()\">Remove done</a>]\r\n```\r\n\r\nGive the user the ability to remove all done tasks from the list.  Here we are using an anchor element and a ng-click attribute to map the anchor click event to the $scope.removeDone function.\r\n\r\n``` html\r\n<ul class=\"unstyled\">\r\n  <li ng-repeat=\"todo in todos\">\r\n    <input type=\"checkbox\" ng-model=\"todo.done\" ng-click=\"updateTodo(todo)\">\r\n    <span ng-class=\"{{done: todo.done\">{{todo.text}}</span>\r\n  </li>\r\n</ul>\r\n```\r\n\r\nCreate an unorded list of todo tasks, for each line item \r\nwe want to provide a checkbox with an attribute `ng-model` assigned \r\nto $scope.todo.done and map the input ng-click attribute to $scope.updateTodo(todo).\r\n\r\nNext we want to use the ng-class directive to add the `done` class to the span element if `todo.done === true`.  And use the ng-bind directive to show the todo task.\r\n\r\n\r\n``` html\r\n<form ng-submit=\"addTodo()\">\r\n  <input type=\"text\" ng-model=\"todoText\"  size=\"30\"\r\n         placeholder=\"add new todo here\">\r\n  <input class=\"btn btn-primary\" type=\"submit\" value=\"add\">\r\n</form>\r\n```\r\n\r\nFinally, we want to add a form with a directive `ng-submit`, which is assigned to `$scope.addTodo()`.  In the form, we are assigning the input element `ng-model` to $scope.todoText.\r\n\r\nOpen the browser and you should now see the total text and input form.\r\n\r\nLets wire the view to the controller and models.\r\n\r\nopen main.js and add the following:\r\n\r\n``` js\r\n$scope.todos = [];\r\n```\r\n\r\ninitialize the $scope.todos array.\r\n\r\n```\r\n$scope.remaining = function() {\r\n  var count = 0;\r\n  angular.forEach($scope.todos, function(todo) {\r\n      count += todo.done ? 0 : 1;\r\n  });\r\n  return count;\r\n};\r\n```\r\n\r\nadd the remaining function to the controller.  Now we should \r\nsee 0 of 0 remaining.\r\n\r\n``` js\r\n$scope.removeDone = function() {\r\n  // backup array\r\n  var oldTodos = $scope.todos;\r\n  // reset to an empty array\r\n  $scope.todos = [];\r\n  // loop through the old values\r\n  angular.forEach(oldTodos, function(todo) {\r\n    // if todo is marked as done, or checked.\r\n    if (!todo.done) {\r\n      // add todo to the array\r\n      $scope.todos.push(todo);\r\n    }\r\n    else {\r\n      // remove todo from array\r\n      $scope.removeTodo(todo);\r\n    }\r\n  });\r\n};\r\n```\r\n\r\n```js\r\n$scope.addTodo = function() {\r\n  var newTodo = {\r\n    _id: Math.uuid(),\r\n    text: $scope.todoText,\r\n    done: false\r\n  };\r\n  $scope.todos.push(newTodo);\r\n  $scope.todoText = '';\r\n};\r\n```\r\n\r\n``` js\r\n$scope.removeDone = function() {\r\n  var oldTodos = $scope.todos;\r\n  $scope.todos = [];\r\n  angular.forEach(oldTodos, function(todo) {\r\n    if (!todo.done) {\r\n      $scope.todos.push(todo);\r\n    }\r\n    else {\r\n      $scope.removeTodo(todo);\r\n    }\r\n  });\r\n};\r\n```\r\n\r\n$scope.removeTodo = function(todo) {\r\n  $scope.todos.splice(\r\n    $scope.todos.indexOf(todo), 1);\r\n};\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}